# Configuration file for circleci.com continuous integration (testing)

machine:

  python:
    version: 2.7.5

  environment:
    ENV: ${HOME}/.bash_profile
    MINI: ${HOME}/miniconda2
    MB: ${HOME}/mindboggle
    vtk_cpp_tools: ${HOME}/mindboggle/vtk_cpp_tools/bin

dependencies:

  override:

    #-------------------------------------------------------------------------
    # Install system-wide dependencies in linux:
    #-------------------------------------------------------------------------
    - sudo apt-get update
    - sudo apt-get install -y g++ git make xorg
    #-------------------------------------------------------------------------
    # Install Anaconda's latest miniconda Python distribution:
    #-------------------------------------------------------------------------
    - wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
    - bash miniconda.sh -b -p $MINI
    - echo "export PATH="${MINI}/bin:$PATH"" >> $ENV
    - source $ENV
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    #-------------------------------------------------------------------------
    # Use conda and pip to set up python environment:
    #-------------------------------------------------------------------------
    - conda create -q -n test-environment cmake pip numpy scipy matplotlib pandas networkx vtk ipython
    - pip install --upgrade pip
    - pip install nose coverage  # install testing tools for circle
    - pip install -I .
    - pip install nibabel nipype
    #-------------------------------------------------------------------------
    # Install Mindboggle:
    #-------------------------------------------------------------------------
    - git clone https://github.com/nipy/mindboggle.git $MB
    - cd $MB
    - python setup.py install
    - mkdir $vtk_cpp_tools
    - cd $vtk_cpp_tools
    - cmake ../
    - make
    # Set environment variables:
    - echo "export vtk_cpp_tools=$vtk_cpp_tools" >> $ENV
    - echo "export PATH=$vtk_cpp_tools:\$PATH" >> $ENV
    - source $ENV


    #-------------------------------------------------------------------------
    # Fix paths to Linux libraries using symbolic links:
    #-------------------------------------------------------------------------
    # To avoid the following errors:
    # "No rule to make target `/usr/lib/x86_64-linux-gnu/libGLU.so'"
    # ...
    # http://techtidings.blogspot.com/2012/01/problem-with-libglso-on-64-bit-ubuntu.html
    #if [ $OS = "Linux" ]; then
    #    if [ $SUDO -eq 1 ]; then
    #        sudo mkdir /usr/lib64
    #        sudo ln -s /usr/lib/x86_64-linux-gnu/libGLU.so.1 /usr/lib64/libGLU.so
    #        sudo ln -s /usr/lib/x86_64-linux-gnu/libSM.so.6 /usr/lib64/libSM.so
    #        sudo ln -s /usr/lib/x86_64-linux-gnu/libICE.so.6 /usr/lib64/libICE.so
    #        sudo ln -s /usr/lib/x86_64-linux-gnu/libX11.so.6 /usr/lib64/libX11.so
    #        sudo ln -s /usr/lib/x86_64-linux-gnu/libXext.so.6 /usr/lib64/libXext.so
    #        sudo ln -s /usr/lib/x86_64-linux-gnu/libXt.so.6 /usr/lib64/libXt.so
    #        sudo ln -s /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1 /usr/lib64/libGL.so
    #    else
    #        mkdir /usr/lib64
    #        ln -s /usr/lib/x86_64-linux-gnu/libGLU.so.1 /usr/lib64/libGLU.so
    #        ln -s /usr/lib/x86_64-linux-gnu/libSM.so.6 /usr/lib64/libSM.so
    #        ln -s /usr/lib/x86_64-linux-gnu/libICE.so.6 /usr/lib64/libICE.so
    #        ln -s /usr/lib/x86_64-linux-gnu/libX11.so.6 /usr/lib64/libX11.so
    #        ln -s /usr/lib/x86_64-linux-gnu/libXext.so.6 /usr/lib64/libXext.so
    #        ln -s /usr/lib/x86_64-linux-gnu/libXt.so.6 /usr/lib64/libXt.so
    #        ln -s /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1 /usr/lib64/libGL.so
    #    fi
    #fi
