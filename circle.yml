# Configuration file for circleci.com continuous integration (testing)

## Customize the test machine
machine:
  # Add some environment variables
  environment:
    CONDA_ROOT: /home/ubuntu/miniconda
    TEST_ENV_NAME: mindboggle-env
    TEST_ENV_PREFIX: /home/ubuntu/miniconda/envs/mindboggle-env
    vtk_cpp_tools: /home/ubuntu/mindboggle/vtk_cpp_tools/bin
    PATH: ${TEST_ENV_PREFIX}/bin:${CONDA_ROOT}/bin:$vtk_cpp_tools:${PATH}
    PYTHONPATH: $MINI/envs/mindboggle-env/lib/python3.5/site-packages/vtk:$PYTHONPATH

## Customize dependencies
dependencies:
  cache_directories:
    - /home/ubuntu/miniconda

  override:
    #-------------------------------------------------------------------------
    # Download/install conda (if not already cached)
    #-------------------------------------------------------------------------
    - >
      if [[ ! -d ${CONDA_ROOT} ]]; then
          echo "Installing Miniconda3...";
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh &&
          bash Miniconda3-latest-Linux-x86_64.sh -b -p ${CONDA_ROOT};
      else
          echo "Using cached Miniconda install";
      fi
#    - conda config --set show_channel_urls yes --set always_yes yes
#    - conda config --add channels clinicalgraphics
#    - conda update conda --quiet
#    - conda install conda-build anaconda-client --quiet
    #-------------------------------------------------------------------------
    # Create a Python environment and install VTK from the Anaconda Cloud
    # api site (https://conda.anaconda.org/clinicalgraphics):
    #-------------------------------------------------------------------------
#    - source deactivate
    conda info --envs
    - source activate mindboggle-env
    - conda info --envs
#    - export PATH="$MINI/envs/mindboggle-env/bin/:$PATH"
    - python -c "import sys; print(sys.executable)"
    - /home/ubuntu/miniconda/envs/mindboggle-env/bin/python -c "import sys; print(sys.executable)"
#    - >
#      if [ ! -d ${TEST_ENV_PREFIX} ]; then
#          conda create -y -n ${TEST_ENV_NAME} -c clinicalgraphics vtk;
#      else
#          conda install -y -n ${TEST_ENV_NAME} -c clinicalgraphics vtk;
#      fi
#    # Replace packaged source with full git repo
#    - rm -rf ${TEST_ENV_PREFIX}/ilastik-meta
#    - git clone http://github.com/ilastik/ilastik-meta ${TEST_ENV_PREFIX}/ilastik-meta
#    - cd ${TEST_ENV_PREFIX}/ilastik-meta && git submodule init
#    - cd ${TEST_ENV_PREFIX}/ilastik-meta && git submodule update --recursive
#    - cd ${TEST_ENV_PREFIX}/ilastik-meta && git submodule foreach "git checkout master"
#
#    # Replace lazyflow with the code in the current build (may not be master)
#    - rm -rf ${TEST_ENV_PREFIX}/ilastik-meta/ilastik
#    - ln -s `pwd` ${TEST_ENV_PREFIX}/ilastik-meta/ilastik

## Customize test commands
test:
  override:
#    - cd ${TEST_ENV_PREFIX}/ilastik-meta/ilastik/tests ./run_each_unit_test.sh
#    - cd ${TEST_ENV_PREFIX} python setup.py install
#    - python setup.py install
#    - cd ${TEST_ENV_PREFIX} python -c "import sys; print(sys.executable)"
#    - python -c "import sys; print(sys.executable)"
#    - python -c "import vtk"
#    - cd ${TEST_ENV_PREFIX} python -c "import vtk"



#  pre:

    #-------------------------------------------------------------------------
    # Install system-wide dependencies in Linux:
    #-------------------------------------------------------------------------
#    - sudo apt-get update
#    - sudo apt-get install g++ git make xorg
    #-------------------------------------------------------------------------
    # Fix paths to Linux libraries using symbolic links:
    #-------------------------------------------------------------------------
    # To avoid the following errors:
    # "No rule to make target `/usr/lib/x86_64-linux-gnu/libGLU.so'"
    # ...
    # http://techtidings.blogspot.com/2012/01/problem-with-libglso-on-64-bit-ubuntu.html
#    - sudo mkdir /usr/lib64
#    - sudo ln -s /usr/lib/x86_64-linux-gnu/libGLU.so.1 /usr/lib64/libGLU.so
#    - sudo ln -s /usr/lib/x86_64-linux-gnu/libSM.so.6 /usr/lib64/libSM.so
#    - sudo ln -s /usr/lib/x86_64-linux-gnu/libICE.so.6 /usr/lib64/libICE.so
#    - sudo ln -s /usr/lib/x86_64-linux-gnu/libX11.so.6 /usr/lib64/libX11.so
#    - sudo ln -s /usr/lib/x86_64-linux-gnu/libXext.so.6 /usr/lib64/libXext.so
#    - sudo ln -s /usr/lib/x86_64-linux-gnu/libXt.so.6 /usr/lib64/libXt.so
#    - sudo ln -s /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1 /usr/lib64/libGL.so
    #-------------------------------------------------------------------------
    # Install conda and add it to PATH:
    #-------------------------------------------------------------------------
##    - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh;
##    - bash ~/miniconda.sh -b -p $MINI
#    - export PATH="$MINI/bin:$PATH"
##    - conda config --set show_channel_urls yes --set always_yes yes
##    - conda config --add channels clinicalgraphics
##    - conda update conda --quiet
##    - conda install conda-build anaconda-client --quiet
    #-------------------------------------------------------------------------
    # Create a Python environment and install VTK from the Anaconda Cloud
    # api site (https://conda.anaconda.org/clinicalgraphics):
    #-------------------------------------------------------------------------
    #- conda install -c https://conda.anaconda.org/clinicalgraphics vtk
    #- conda install conda-env
##    - conda env create #--quiet
##    - source activate mindboggle-env
#    - export PATH="$MINI/envs/mindboggle-env/bin:$PATH"
#    - export PYTHONPATH="$MINI/envs/mindboggle-env/lib/python3.5/site-packages/vtk:$PYTHONPATH"
    #-------------------------------------------------------------------------
    # Install nipype:
    #-------------------------------------------------------------------------
#    - conda install pip scipy nose networkx lxml future simplejson
#    - pip install nibabel prov xvfbwrapper traits
#    - pip install https://github.com/nipy/nipype/archive/master.zip
    #-------------------------------------------------------------------------
    # Install optional graphviz and pygraphviz for generating nipype graphs:
    #-------------------------------------------------------------------------
#    - sudo apt-get install graphviz libgraphviz-dev
#    - pip install --upgrade pygraphviz graphviz

    #-------------------------------------------------------------------------
    # Install additional testing tools for circleci.com:
    #-------------------------------------------------------------------------
#    - conda install ipython pytest coverage  # nose
    #-------------------------------------------------------------------------
    # Install Mindboggle's remaining dependencies and C++ code
    #-------------------------------------------------------------------------
#    - conda install cmake matplotlib numpy pandas
#    - mkdir $vtk_cpp_tools && cd $vtk_cpp_tools && cmake ../ && make

#test:

#  pre:
##    - $MINI/envs/mindboggle-env/bin/python setup.py install
##    - python -c "import sys; print(sys.executable)"
##    - $MINI/envs/mindboggle-env/bin/python -c "import vtk"
#    - nosetests --with-coverage --with-doctest evaluate/
#    - nosetests --with-coverage --with-doctest features/
#    - nosetests --with-coverage --with-doctest guts/
#    - nosetests --with-coverage --with-doctest mio/
#    - nosetests --with-coverage --with-doctest shapes/
#    - nosetests --with-coverage --with-doctest thirdparty/
    #- coveralls