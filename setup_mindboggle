#!/usr/bin/python
"""
Mindboggle virtual machine setup script.

This program packages Mindboggle (http://mindboggle.info) and dependencies
in a VirtualBox virtual machine using Vagrant software.
Vagrant (http://www.vagrantup.com) and VirtualBox (http://www.virtualbox.org)
must be installed, and you need a good Internet connection.

Copy this file into a setup directory.  For example::

    mkdir /Users/arno/mindboggle_setup
    cp setup_mindboggle /Users/arno/mindboggle_setup/
    cd /Users/arno/mindboggle_setup/

For help using this program, type the following in a terminal window::

    python setup_mindboggle --help

As an example installation, configure access to ANTs and FreeSurfer data
via local mounted directories, and set the number of processors to 6::

    python setup_mindboggle --install
                            --home /home/vagrant
                            --freesurfer /Applications/freesurfer/subjects
                            --ants /data/antsCorticalThickness/subjects
                            --proc 6
    vagrant up install

The above installation is done only once, unless new configuration settings
are desired.  To run mindboggle::

    vagrant up
    vagrant ssh  # "VBoxManage list vms" if need the name of the VM


ADVANCED: To build the above Mindboggle box from scratch::

    # Run this file in your setup directory, and build the box:
    python setup_mindboggle --build --install
    vagrant up build
    VBoxManage list vms  # to find <vm name> below
    vagrant package --base <vm name> --output mindboggle.<version#>.box

    # Upload the box to the website:
    rsync -avz --sparse -e /usr/bin/ssh mindboggle.<version#>.box
        binarybottle@binarybottle.com:mindboggle.info/vm/

    # Manual install would begin with:
    vagrant init hashicorp/precise64
    vagrant up
    vagrant ssh


Authors:
Arno Klein, 2014  .  arno@mindboggle.info  .  www.binarybottle.com

Copyright 2014,  Mindboggle team (http://mindboggle.info), Apache v2.0 License

"""
import os
import argparse

#=============================================================================
# Command-line arguments
#=============================================================================
parser = argparse.ArgumentParser(description="""
This program either packages Mindboggle (http://mindboggle.info) and
all of its dependencies in a virtual machine (--build) or configures the
virtual machine (--install) with mounted directories to access FreeSurfer
recon-all subject data (--freesurfer), ANTs antsCorticalThickness.sh
subject data (--ants), or additional atlases (--atlases) and an output
directory (--out). You must have Vagrant (http://www.vagrantup.com)
and VirtualBox (http://www.virtualbox.org) installed, as well as a good
Internet connection.

Ex: python setup_mindboggle
    --out /Users/arno/setup_mindboggle
    --freesurfer /Applications/freesurfer/subjects
    --ants /data/antsCorticalThickness
    --proc 6 --mem 4096 --cpu 75 """,
    formatter_class = lambda prog:
    argparse.HelpFormatter(prog, max_help_position=40))

parser.add_argument("--out",
                    help=("Output directory (default: $HOME/mindboggled)"),
                    metavar='STR')
parser.add_argument("--freesurfer",
                    help=("FreeSurfer subjects directory (default: "
                          "$SUBJECTS_DIR)"),
                    metavar='STR')
parser.add_argument("--ants",
                    help=("Optional directory containing "
                          "antsCorticalThickness.sh "
                          "output in individual subject directories"),
                    metavar='STR')
parser.add_argument("--atlases",
                    help=("Optional directory containing additional atlases"),
                    metavar='STR')
parser.add_argument("--cpu",
                    help=('Maximum CPU (percent): "--cpu 50" (default)'),
                    type=int, default=50, metavar='INT')
parser.add_argument("--mem",
                    help=('Maximum memory (MB): "--mem 4096" (default)'),
                    type=int, default=4096, metavar='INT')
parser.add_argument("--proc",
                    help=('Number of processors: "--proc 1" (default)'),
                    type=int, default=1, metavar='INT')
parser.add_argument("--install",
                    help=("Configure the Vagrant box; mount ANTs and "
                          "FreeSurfer data (run once before running "
                          "mindboggle for the first time)"),
                    action='store_true')
parser.add_argument("--build",
                    help=("Build Vagrant box (ADVANCED)"),
                    action='store_true')

args = parser.parse_args()

#=============================================================================
# Configure mount directories and variables below
#=============================================================================
mindboggle_version = "0"
vagrantfile_api_version = "2"
home = os.environ['HOME']

if args.out:
    out_string = 'install_config.vm.synced_folder "{0}", ' \
        '"home/vagrant/mindboggled"'.format(args.out)
else:
    out_string = 'install_config.vm.synced_folder "{0}/mindboggled", ' \
        '"home/vagrant/mindboggled"'.format(os.environ['HOME'])
if args.freesurfer:
    freesurfer_string = 'install_config.vm.synced_folder "{0}", ' \
        '"/home/vagrant/freesurfer/subjects"'.\
        format(args.freesurfer)
else:
    freesurfer_string = 'install_config.vm.synced_folder "{0}", ' \
        '"/home/vagrant/freesurfer/subjects"'.\
        format(os.environ['SUBJECTS_DIR'])
if args.ants:
    ants_string = 'install_config.vm.synced_folder "{0}", ' \
                  '"/home/vagrant/ants_subjects"'.format(args.ants)
else:
    ants_string = ''
if args.atlases:
    atlases_string = 'install_config.vm.synced_folder "{0}", ' \
                     '"{1}atlases"'.format(args.atlases, home)
else:
    atlases_string = ''

#=============================================================================
# Installation script to include in Vagrant file
#=============================================================================
if args.build:
    script = """#=============================================================================
# Build script for Vagrantfile
#=============================================================================
$script = <<SCRIPT
#-----------------------------------------------------------------------------
# Assign download and installation path arguments:
#-----------------------------------------------------------------------------
DL_PREFIX=$1
INSTALL_PREFIX=$2

#-----------------------------------------------------------------------------
# System-wide dependencies:
#-----------------------------------------------------------------------------
apt-get update
apt-get install -y g++ git make xorg

#-----------------------------------------------------------------------------
# Anaconda's miniconda Python distribution for local installs:
#-----------------------------------------------------------------------------
CONDA_DL=${DL_PREFIX}/Miniconda-3.7.0-Linux-x86_64.sh
wget http://repo.continuum.io/miniconda/Miniconda-3.7.0-Linux-x86_64.sh -P $DL_PREFIX
chmod +x $CONDA_DL
$CONDA_DL -b -p $INSTALL_PREFIX
# Setup PATH
export PATH=${INSTALL_PREFIX}/bin:$PATH

#-----------------------------------------------------------------------------
# Additional resources for installing packages:
#-----------------------------------------------------------------------------
conda install --yes cmake pip

#-----------------------------------------------------------------------------
# Python packages:
#-----------------------------------------------------------------------------
conda install --yes numpy scipy matplotlib nose networkx traits vtk ipython
# Nipype: software pipeline framework; Nibabel: medical image read/write lib
pip install nibabel nipype
VTK_DIR=${INSTALL_PREFIX}/lib/vtk-5.10
#pip install https://github.com/RDFLib/rdflib/archive/master.zip
#pip install https://github.com/satra/prov/archive/rdf.zip

#-----------------------------------------------------------------------------
# Mindboggle:
#-----------------------------------------------------------------------------
MB_DL=${DL_PREFIX}/mindboggle
git clone https://github.com/binarybottle/mindboggle.git $MB_DL
cd $MB_DL
python setup.py install --prefix=${INSTALL_PREFIX}
cd ${MB_DL}/mindboggle_tools/bin
cmake ../ -DVTK_DIR:STRING=${VTK_DIR}
make
cd $DL_PREFIX
cp -r ${MB_DL}/mindboggle_tools ${INSTALL_PREFIX}

#-----------------------------------------------------------------------------
# FreeSurfer's recon-all (http://surfer.nmr.mgh.harvard.edu)
# provides labeled cortical surfaces and non/cortical volumes for Mindboggle.
#-----------------------------------------------------------------------------
FS_DL=${DL_PREFIX}/freesurfer-Linux-centos4_x86_64-stable-pub-v5.3.0.tar.gz
wget -c ftp://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/5.3.0/freesurfer-Linux-centos4_x86_64-stable-pub-v5.3.0.tar.gz -P $DL_PREFIX
tar -xvzf $FS_DL -C ${INSTALL_PREFIX}

#-----------------------------------------------------------------------------
# ANTs (http://brianavants.wordpress.com/2012/04/13/
#              updated-ants-compile-instructions-april-12-2012/)
# antsCorticalThickness.h pipeline optionally provides tissue segmentation,
# affine registration to standard space, and nonlinear registration for
# whole-brain labeling, to improve and extend Mindboggle results.
#-----------------------------------------------------------------------------
ANTS_DL=${DL_PREFIX}/ants
git clone https://github.com/stnava/ANTs.git $ANTS_DL
cd $ANTS_DL
git checkout tags/v2.1.0rc2
mkdir ${INSTALL_PREFIX}/ants
cd ${INSTALL_PREFIX}/ants
cmake $ANTS_DL -DVTK_DIR:STRING=${VTK_DIR}
make
cp -r ${ANTS_DL}/Scripts/* ${INSTALL_PREFIX}/ants/bin

#-----------------------------------------------------------------------------
# Create a global environment sourcing script and set environment variables:
#-----------------------------------------------------------------------------
MB_ENV=/etc/profile.d/mb_env.sh
touch $MB_ENV

# -- Local install --
echo "# Local install prefix" >> $MB_ENV
echo "export PATH=${INSTALL_PREFIX}/bin:\$PATH" >> $MB_ENV

# -- ANTs --
echo "# ANTs" >> $MB_ENV
echo "export ANTSPATH=${INSTALL_PREFIX}/ants/bin" >> $MB_ENV
echo "export PATH=\$ANTSPATH:\$PATH" >> $MB_ENV

# -- FreeSurfer --
echo "# FreeSurfer" >> $MB_ENV
echo "export FREESURFER_HOME=${INSTALL_PREFIX}/freesurfer" >> $MB_ENV
echo "source \${FREESURFER_HOME}/SetUpFreeSurfer.sh" >> $MB_ENV
echo "export PATH=\${FREESURFER_HOME}/bin:\$PATH" >> $MB_ENV

# -- Mindboggle --
echo "# Mindboggle" >> $MB_ENV
echo "export MINDBOGGLE_TOOLS=${INSTALL_PREFIX}/mindboggle_tools/bin" >> $MB_ENV
echo "export PATH=\$MINDBOGGLE_TOOLS:\$PATH" >> $MB_ENV

#-----------------------------------------------------------------------------
# Finally, remove downloads directory and other non-essential directories:
#-----------------------------------------------------------------------------
rm ${DL_PREFIX}/* -rf

rm_extras=1
if [ $rm_extras == 1 ]
    rm -r ${FREESURFER_HOME}/average
    rm -r ${FREESURFER_HOME}/data
    rm -r ${FREESURFER_HOME}/diffusion
    rm -r ${FREESURFER_HOME}/docs
    rm -r ${FREESURFER_HOME}/matlab
    rm -r ${FREESURFER_HOME}/mni
    rm -r ${FREESURFER_HOME}/subjects/fsaverage
    rm -r ${FREESURFER_HOME}/tktools
    rm -r ${FREESURFER_HOME}/trctrain
    rm -r ${FREESURFER_HOME}/lib/cuda
    rm -r ${FREESURFER_HOME}/lib/qt
    rm -r ${FREESURFER_HOME}/lib/tcl
    rm -r ${FREESURFER_HOME}/lib/tcltktixblt

    mv ${INSTALL_PREFIX}/ants/bin ${INSTALL_PREFIX}/freesurfer/ants_bin
    rm -r ${INSTALL_PREFIX}/ants/*
    mv ${INSTALL_PREFIX}/freesurfer/ants_bin ${INSTALL_PREFIX}/ants/bin
fi
"""

    #-------------------------------------------------------------------------
    # FreeSurfer license:
    #-------------------------------------------------------------------------
    freesurfer_license = """arno@mindboggle.info
    18192
     *Cr4e1z13elAY"""
    license_file = os.path.join(os.environ['FREESURFER_HOME'], '.license')
    f = open(license_file, 'w')
    f.write(freesurfer_license)
    f.close()
else:
    script = ''

#=============================================================================
# Create Vagrantfile
#=============================================================================
vagrant_file = """# Vagrantfile (http://www.vagrantup.com)

{0}

#=============================================================================
# Configure Vagrantfile
#=============================================================================
Vagrant.configure({1}) do |config|

    #-------------------------------------------------------------------------
    # Build a Vagrant base box and install software as per the above script
    #-------------------------------------------------------------------------
    config.vm.define :build do |build_config|

        # Build from an existing Vagrant virtual box:
        build_config.vm.box = "precise64"
        build_config.vm.box_url = "http://files.vagrantup.com/precise64.box"

        # Create a forwarded port mapping to allow access to a specific port
        # within the machine from a port on the host machine. In this example,
        # accessing "localhost:8080" will access port 80 on the guest machine:
        build_config.vm.network "forwarded_port", guest: 80, host: 8080,
            auto_correct: true
        build_config.vm.network :public_network

        # Execute a script within the guest machine:
        build_config.vm.provision "shell", inline: $script

    end

    #-------------------------------------------------------------------------
    # Configure the Mindboggle Vagrant box and mount local directories
    #-------------------------------------------------------------------------
    config.vm.define :install do |install_config|

        # Build from the mindboggle.box Vagrant virtual box
        # (VirtualBox caches it so you only download once):
        install_config.vm.box = "mindboggle"
        install_config.vm.box_url = "mindboggle.{2}.box"
        #http://mindboggle.info/vm/mindboggle.{2}.box"
        install_config.vm.hostname = "mindboggler"

        # Create a forwarded port mapping to allow access to a specific port
        # within the machine from a port on the host machine. In this example,
        # accessing "localhost:8080" will access port 80 on the guest machine:
        install_config.vm.network "forwarded_port", guest: 80, host: 8080,
            auto_correct: true
        install_config.vm.network :public_network

        # Share an additional folder to the guest VM. The first argument is
        # the path on the host to the actual folder. The second argument is
        # the path on the guest to mount the folder.
        # Ex: install_config.vm.synced_folder "../data", "/vagrant_data"
        {3}
        {4}
        {5}
        {6}

        # Configure %CPU, memory, #CPUs
        install_config.vm.provider :virtualbox do |vb|
          vb.customize ["modifyvm", :id, "--cpuexecutioncap", "{7}"]
          vb.customize ["modifyvm", :id, "--memory", "{8}"]
          vb.customize ["modifyvm", :id, "--cpus", "{9}"]
          vb.customize ["modifyvm", :id, "--ioapic", "on"]
        end
    end
end
""".format(script, vagrantfile_api_version, mindboggle_version,
           out_string, freesurfer_string, ants_string, atlases_string,
           args.cpu, args.mem, args.proc)

#=============================================================================
# Write Vagrantfile with substitutions
#=============================================================================
f = open('Vagrantfile', 'w')
f.write(vagrant_file)
f.close()
