#!/usr/bin/python
"""
Functions that fetch the results from thirdparty software

Authors:
Arno Klein, 2011-2014  .  arno@mindboggle.info  .  www.binarybottle.com

Copyright 2014,  Mindboggle team (http://mindboggle.info), Apache v2.0 License

"""


def fetch_ants_data(segmented_file, use_ants_transforms=True):
    """
    Fetch antsCorticalThickness.sh output.

    The input argument "segmented_file" is one of the relevant
    antsCorticalThickness.sh output files called by Mindboggle
    (assume path and PREFIX="ants"):
        ants_subjects/subject1/antsBrainExtractionMask.nii.gz
        ants_subjects/subject1/antsBrainSegmentation.nii.gz
        ants_subjects/subject1/antsSubjectToTemplate0GenericAffine.mat
        ants_subjects/subject1/antsSubjectToTemplate1Warp.nii.gz
        ants_subjects/subject1/antsTemplateToSubject0Warp.nii.gz
        ants_subjects/subject1/antsTemplateToSubject1GenericAffine.mat
    The existence of the transform files are checked only if
    use_ants_transforms == True. Transforms can only be included
    if they have been generated by antsCorticalThickness.sh
    with the -k argument.

    Parameters
    ----------
    segmented_file : string
        full path to a subject's antsCorticalThickness.sh segmented file
    use_ants_transforms : Boolean
        include antsCorticalThickness.sh-generated transforms?

    Returns
    -------
    mask : string
        antsBrainExtraction.sh brain volume mask for extracting brain volume
    segments : string
        Atropos-segmented brain volume
    affine_subject2template : string
        subject to template affine transform (antsRegistration)
    warp_subject2template : string
        subject to template nonlinear transform (antsRegistration)
    affine_template2subject : string
        template to subject affine transform (antsRegistration)
    warp_template2subject : string
        template to subject nonlinear transform (antsRegistration)

    Examples
    --------
    >>> from mindboggle.io.thirdparty import fetch_ants_data
    >>> segmented_file = 'ants_subjects/OASIS-TRT-20-1/tmpBrainSegmentation.nii.gz'
    >>> fetch_ants_data(segmented_file)

    """
    import os

    prefix = segmented_file.strip('BrainSegmentation.nii.gz')

    mask = prefix + 'BrainExtractionMask.nii.gz'
    segments = segmented_file

    if use_ants_transforms:
        affine_subject2template = prefix + 'SubjectToTemplate0GenericAffine.mat'
        warp_subject2template = prefix + 'SubjectToTemplate1Warp.nii.gz'
        affine_template2subject = prefix + 'TemplateToSubject1GenericAffine.mat'
        warp_template2subject = prefix + 'TemplateToSubject0Warp.nii.gz'
        files = [mask, segments,
                 affine_subject2template, warp_subject2template,
                 affine_template2subject, warp_template2subject]
    else:
        affine_subject2template = ''
        warp_subject2template = ''
        affine_template2subject = ''
        warp_template2subject = ''
        files = [mask, segments]

    # The existence of the transform files are checked only if
    # use_ants_transforms == True. Transforms are generated by
    # antsCorticalThickness.sh when the -k argument is used.
    for s in files:
        if not os.path.exists(s):
            str1 = 'antsCorticalThickness.sh output ' + s + ' does not exist.'
            raise IOError(str1)

    return mask, segments, affine_subject2template, warp_subject2template, \
                           affine_template2subject, warp_template2subject


